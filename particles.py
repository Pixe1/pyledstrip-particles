#!/usr/bin/env python3
import argparse
import time
import collections
import math
import random
import sys
# import webserver
from pyledstrip import LedStrip

__LED_PER_METER = 60
__LED_DIST = 1 / __LED_PER_METER
__DEFAULT_TTL = 2


class Particle:
	pos = None
	v = None
	hue = None
	ttl = None
	mass = None

	def __init__(self, pos, v, hue, ttl, mass):
		self.pos = pos
		self.v = v
		self.hue = hue
		self.ttl = ttl
		self.mass = mass

def get_metric_nodes(nodes):
	y_values = [value[1] for value in nodes.values()]
	k = [key for key in nodes.keys()]
	y_max = max(y_values)

	max_dist_per_led = 0
	for i in range(1, len(nodes)):
		key_dist = k[i] - k[i - 1]
		x_diff = nodes[k[i]][0] - nodes[k[i - 1]][0]
		y_diff = nodes[k[i]][1] - nodes[k[i - 1]][1]
		dist = math.sqrt(pow(x_diff, 2) + pow(y_diff, 2))
		dist_per_led = dist / key_dist
		max_dist_per_led = max(dist_per_led, max_dist_per_led)
	f = __LED_DIST / max_dist_per_led / 1.5

	i = 0
	for key, value in nodes.items():
		nodes[key] = (nodes[key][0] * f, (y_max - y_values[i]) * f)
		i = i + 1
	return nodes


def within(a, b, tolerance=1.0):
	if not abs(a.pos - b.pos) < tolerance:
		return False
	return math.copysign(1, a.v) != math.copysign(1, b.v)


def collide(a, b):
	# v1' = (m1*v1 + m2 * (2*v2 - v1)) / (m1 + m2)
	# v2' = (m2*v2 + m1 * (2*v1 - v2)) / (m1 + m2)
	v1, v2 = a.v, b.v
	a.v = (a.mass * v1 + b.mass * (2*v2 - v1))/(a.mass + b.mass)
	b.v = (b.mass * v2 + a.mass * (2*v1 - v2))/(a.mass + b.mass)


unten = {11: (228.5, 203.5), 12: (226.0, 203.0), 13: (223.0, 203.0), 14: (220.0, 202.0), 15: (217.0, 200.0),
   16: (215.0, 198.0), 17: (212.0, 197.0), 18: (209.0, 195.0), 19: (207.0, 193.0), 20: (204.0, 191.0),
   21: (202.0, 189.0), 22: (200.0, 187.0), 23: (197.0, 185.0), 24: (195.0, 183.0), 25: (193.0, 181.5),
   26: (191.0, 179.0), 27: (188.0, 177.0), 28: (186.0, 175.0), 29: (184.0, 174.0), 30: (181.0, 171.5),
   31: (179.0, 169.5), 32: (177.0, 168.0), 33: (174.0, 167.5), 34: (172.0, 165.5), 35: (170.0, 168.0),
   36: (167.0, 168.0), 37: (166.0, 174.0), 38: (164.0, 170.0), 39: (160.0, 171.5), 40: (157.5, 174.0),
   42: (153.0, 175.0), 43: (153.0, 179.0), 44: (150.0, 184.0), 45: (147.0, 185.0), 46: (142.0, 186.0),
   47: (162.0, 182.0), 48: (137.0, 184.0), 49: (135.0, 187.5), 50: (133.0, 191.0), 51: (129.0, 192.5),
   52: (126.0, 191.0), 53: (122.0, 195.0), 54: (119.0, 194.0), 55: (115.0, 195.0), 56: (112.0, 195.0),
   57: (108.0, 194.0), 58: (105.0, 193.0), 59: (103.0, 189.0), 60: (102.0, 185.0), 61: (102.0, 182.0),
   62: (103.0, 179.0), 63: (103.5, 176.0), 64: (104.0, 172.0), 65: (105.5, 169.5), 66: (105.0, 166.0),
   67: (106.0, 163.0), 68: (106.5, 160.0), 69: (107.5, 156.0), 70: (108.0, 153.0), 71: (109.0, 151.0),
   72: (108.5, 147.0), 73: (110.0, 145.0), 74: (109.0, 141.0), 75: (109.0, 138.0), 76: (110.5, 135.0),
   77: (112.0, 132.0), 78: (112.0, 129.0), 79: (114.0, 127.0), 80: (114.0, 124.0), 81: (114.0, 121.0),
   82: (115.5, 118.0), 83: (116.0, 115.5), 84: (119.0, 112.5), 85: (120.0, 110.0), 86: (121.0, 107.0),
   87: (121.0, 104.0), 88: (121.0, 100.5), 89: (120.0, 98.0), 90: (121.0, 95.0), 91: (121.0, 91.0), 92: (122.0, 88.0),
   93: (126.0, 86.0), 94: (126.0, 83.0), 95: (127.0, 80.0), 96: (127.0, 77.5), 100: (128.5, 65.5), 101: (123.0, 69.5),
   102: (120.0, 72.5), 105: (108.0, 65.0), 106: (106.0, 67.0), 107: (103.0, 68.0), 108: (100.0, 70.0),
   109: (98.0, 70.0), 110: (95.5, 72.5), 111: (93.0, 72.0), 112: (90.0, 73.0), 113: (86.0, 73.5), 114: (83.0, 72.0),
   115: (80.0, 72.0), 116: (77.0, 71.0), 117: (74.0, 72.0), 119: (66.5, 72.0), 120: (64.0, 70.0), 121: (60.0, 70.0),
   122: (57.0, 69.5), 123: (54.0, 68.0), 124: (53.0, 70.0), 125: (52.0, 65.0), 126: (53.0, 61.0), 127: (57.0, 60.0),
   128: (61.0, 60.5), 129: (66.0, 62.0), 130: (69.0, 64.0), 131: (71.0, 67.0), 132: (73.0, 69.0), 133: (73.0, 74.0),
   134: (74.0, 76.0), 135: (76.5, 79.0), 136: (79.0, 81.5), 137: (80.0, 85.0), 138: (80.5, 88.0), 139: (81.0, 91.0),
   140: (83.0, 93.0), 141: (83.0, 96.0), 143: (92.0, 79.0), 144: (103.0, 106.0), 148: (109.0, 90.0),
   149: (109.0, 111.0), 156: (129.0, 68.0), 158: (56.0, 134.0), 159: (61.0, 136.0), 160: (63.0, 134.0),
   161: (62.5, 128.0), 162: (62.5, 125.5), 163: (65.0, 123.0), 164: (66.5, 121.0), 165: (69.0, 118.0),
   166: (75.0, 120.0), 167: (72.0, 113.0), 168: (75.0, 110.0), 169: (76.5, 108.0), 170: (79.0, 105.0),
   171: (81.0, 103.0), 172: (88.0, 104.0), 173: (88.0, 100.0), 174: (87.5, 95.0), 175: (95.0, 97.0), 176: (90.0, 90.0),
   177: (93.5, 87.0), 178: (95.5, 85.0), 179: (97.0, 82.0), 180: (100.0, 80.0), 181: (103.0, 78.0), 182: (105.0, 75.0),
   183: (111.5, 75.5), 186: (114.5, 63.0), 187: (119.0, 62.0), 188: (125.0, 41.0), 190: (130.0, 55.0),
   191: (129.0, 72.0), 192: (131.0, 74.0), 193: (132.0, 78.0), 194: (133.5, 80.5), 195: (135.0, 83.0),
   196: (135.0, 86.0), 197: (138.0, 89.0), 198: (139.0, 92.0), 199: (140.0, 94.0), 200: (141.0, 97.0),
   201: (143.0, 100.0), 202: (144.0, 103.0), 203: (144.0, 105.0), 204: (146.0, 108.5), 205: (148.0, 111.0),
   206: (149.5, 113.5), 207: (151.0, 116.0), 208: (154.0, 118.0), 209: (154.0, 120.0), 210: (157.0, 123.0),
   211: (158.0, 125.5), 212: (160.0, 129.0), 213: (162.5, 128.5), 214: (165.0, 130.5), 215: (167.5, 131.5),
   216: (171.0, 132.0), 217: (173.0, 129.5), 218: (176.0, 131.0), 219: (179.0, 130.0), 220: (182.0, 128.5),
   221: (184.5, 128.0), 224: (189.5, 129.0), 225: (196.0, 129.0), 226: (203.5, 120.0), 227: (199.0, 127.0),
   228: (188.0, 113.0), 229: (182.0, 135.0), 230: (179.0, 135.0), 231: (174.0, 135.0), 232: (164.0, 125.0),
   233: (162.5, 127.0), 234: (165.0, 119.0), 235: (166.0, 121.5), 236: (153.0, 121.0), 237: (175.0, 103.0),
   238: (229.0, 90.0), 239: (191.5, 98.0), 240: (234.0, 95.5), 241: (235.5, 90.0), 242: (236.5, 96.5),
   243: (229.5, 95.5), 244: (231.0, 100.0), 245: (226.0, 97.0), 246: (226.0, 104.0), 247: (221.0, 100.0),
   248: (218.0, 102.0), 249: (215.0, 103.0), 250: (213.0, 105.5), 251: (210.0, 107.0), 252: (207.0, 109.0),
   253: (204.0, 110.0), 254: (201.0, 111.0), 255: (199.0, 113.0), 256: (195.0, 114.5), 257: (192.0, 115.0),
   258: (189.0, 117.0), 259: (186.0, 118.0), 260: (183.0, 119.0), 261: (180.0, 121.0), 262: (177.0, 121.0),
   263: (174.0, 126.0), 264: (170.5, 123.5), 266: (171.0, 120.0), 267: (171.5, 117.5), 268: (172.0, 116.0),
   269: (173.0, 113.0), 270: (174.5, 111.5), 271: (175.0, 109.0), 272: (176.0, 107.0), 273: (178.0, 105.0),
   274: (179.0, 103.0), 275: (181.0, 101.0), 276: (182.5, 99.0), 277: (185.0, 97.0), 278: (186.0, 95.0),
   279: (187.0, 92.0), 280: (189.0, 90.0), 281: (191.5, 88.5), 282: (193.0, 86.0), 283: (196.0, 84.0),
   284: (198.0, 82.0), 285: (200.0, 80.0), 286: (203.0, 78.0), 287: (205.5, 76.0), 288: (208.0, 74.0),
   289: (210.0, 72.0), 290: (213.0, 70.0), 291: (215.0, 68.0), 292: (218.0, 66.0), 293: (220.0, 64.0),
   294: (223.0, 62.0), 295: (225.0, 59.0), 296: (227.5, 57.0), 297: (231.0, 55.0), 298: (233.0, 53.0),
   299: (235.0, 50.0)}
unten_besser = {0: (87.0, 218.0), 1: (85.0, 216.0), 2: (81.0, 214.0), 3: (78.0, 213.0), 10: (64.0, 212.5),
   11: (68.0, 207.0), 12: (73.5, 210.5), 13: (73.0, 205.0), 14: (74.5, 205.0), 15: (78.0, 205.0), 16: (80.0, 204.5),
   17: (83.0, 203.5), 18: (85.5, 202.5), 19: (88.0, 199.5), 20: (90.0, 198.0), 21: (94.5, 198.0), 22: (95.0, 194.0),
   23: (98.0, 191.0), 24: (102.0, 191.5), 25: (103.0, 187.0), 26: (106.0, 185.0), 27: (107.5, 182.0),
   28: (111.0, 181.0), 29: (116.0, 180.5), 30: (119.0, 180.0), 31: (118.0, 173.0), 32: (122.0, 170.0),
   33: (126.0, 170.0), 34: (129.0, 171.0), 35: (132.0, 172.0), 36: (135.0, 165.0), 37: (137.0, 174.0),
   38: (138.5, 172.5), 39: (141.5, 174.5), 40: (144.5, 174.5), 41: (146.0, 169.0), 42: (149.0, 173.5),
   43: (152.0, 176.0), 44: (154.0, 175.0), 45: (156.0, 177.0), 46: (158.0, 175.0), 47: (161.0, 177.0),
   48: (163.0, 179.0), 49: (165.0, 179.0), 50: (167.5, 179.5), 51: (170.0, 179.0), 52: (172.5, 180.0),
   53: (175.0, 180.0), 54: (178.5, 181.0), 55: (181.0, 181.0), 56: (184.0, 181.0), 57: (187.0, 181.0),
   58: (190.0, 180.0), 59: (193.0, 179.0), 60: (196.5, 177.0), 61: (195.0, 175.0), 62: (196.0, 173.0),
   63: (194.5, 170.0), 64: (192.0, 167.0), 65: (191.0, 165.0), 66: (195.5, 162.0), 67: (195.0, 159.0),
   68: (194.5, 157.0), 69: (190.0, 155.0), 70: (194.0, 152.0), 71: (191.0, 149.5), 72: (194.0, 147.0),
   73: (193.0, 144.0), 74: (194.0, 141.0), 75: (194.0, 139.0), 76: (192.0, 135.0), 77: (210.0, 133.0),
   78: (191.0, 131.0), 79: (191.0, 128.0), 80: (190.0, 125.0), 81: (190.0, 122.0), 82: (190.0, 119.0),
   83: (188.5, 116.0), 84: (188.0, 113.0), 85: (188.5, 110.0), 86: (180.0, 108.0), 87: (187.5, 104.0),
   88: (179.0, 101.0), 89: (180.0, 98.0), 90: (185.0, 94.0), 91: (184.0, 91.0), 92: (183.0, 88.0), 93: (183.0, 85.0),
   94: (183.0, 82.0), 95: (182.0, 78.0), 96: (181.0, 75.0), 97: (184.0, 67.0), 98: (174.0, 67.0), 99: (175.0, 63.5),
   100: (177.0, 43.0), 101: (181.5, 62.5), 102: (185.0, 65.0), 103: (188.0, 66.5), 104: (191.0, 66.0),
   105: (194.0, 67.5), 106: (197.0, 69.0), 107: (200.0, 67.0), 108: (203.0, 69.5), 109: (206.0, 71.0),
   110: (209.0, 72.0), 111: (213.0, 73.0), 112: (217.0, 73.5), 113: (220.0, 72.0), 114: (223.0, 68.0),
   115: (226.0, 66.0), 116: (229.5, 74.5), 117: (232.0, 74.0), 118: (235.5, 74.0), 119: (238.0, 74.0),
   120: (241.0, 73.0), 121: (243.0, 73.0), 122: (246.0, 70.0), 123: (245.0, 65.0), 125: (242.0, 65.0),
   126: (240.0, 64.0), 127: (236.0, 64.5), 128: (233.0, 64.0), 129: (230.0, 65.0), 130: (147.0, 71.0),
   133: (225.5, 75.5), 134: (224.0, 78.0), 135: (222.0, 80.0), 136: (221.0, 83.0), 137: (219.0, 84.5),
   138: (220.0, 88.0), 139: (219.5, 90.0), 140: (218.0, 92.5), 141: (217.0, 95.5), 142: (217.0, 98.0),
   143: (217.0, 101.0), 144: (219.0, 106.0), 145: (225.0, 107.0), 146: (226.0, 110.0), 147: (229.0, 112.0),
   148: (230.0, 114.0), 149: (233.0, 117.0), 150: (235.0, 119.0), 151: (238.0, 121.5), 152: (236.5, 125.5),
   153: (240.5, 127.0), 154: (242.0, 130.0), 155: (242.0, 134.0), 158: (239.0, 140.5), 159: (236.0, 140.0),
   160: (232.0, 130.0), 161: (229.0, 128.0), 162: (227.0, 125.0), 163: (225.0, 123.0), 164: (223.0, 120.0),
   165: (222.0, 118.0), 166: (219.0, 116.0), 167: (217.0, 114.5), 168: (215.0, 112.0), 169: (213.5, 109.0),
   170: (211.0, 107.0), 171: (209.0, 105.0), 172: (208.0, 103.0), 173: (206.5, 100.0), 174: (205.0, 97.5),
   175: (203.0, 95.0), 176: (201.0, 93.0), 177: (199.0, 90.5), 178: (197.0, 89.0), 179: (196.0, 85.0),
   180: (193.0, 84.0), 181: (192.0, 81.0), 182: (189.5, 79.0), 183: (188.5, 77.0), 184: (187.0, 74.0),
   185: (184.0, 71.0), 186: (185.5, 76.5), 187: (180.5, 26.5), 189: (174.5, 49.5), 190: (169.0, 71.0),
   191: (169.0, 75.0), 192: (148.0, 80.0), 193: (170.0, 80.0), 194: (164.0, 81.0), 195: (163.0, 84.0),
   196: (168.0, 89.0), 197: (166.5, 92.0), 198: (159.0, 91.0), 199: (158.0, 96.0), 200: (160.0, 100.0),
   201: (167.0, 98.0), 202: (160.0, 104.0), 203: (157.0, 105.0), 204: (152.0, 108.0), 205: (155.0, 112.0),
   206: (153.0, 114.0), 207: (152.0, 118.0), 208: (149.0, 120.0), 209: (147.0, 122.0), 210: (146.0, 123.5),
   211: (144.0, 127.0), 212: (144.0, 130.0), 213: (140.0, 142.0), 214: (137.5, 134.0), 215: (134.0, 135.0),
   216: (131.0, 136.5), 217: (127.0, 135.0), 218: (124.0, 139.5), 219: (121.0, 133.5), 220: (118.0, 133.0),
   221: (115.0, 130.0), 222: (112.0, 129.0), 223: (109.5, 132.0), 224: (106.0, 126.0), 225: (104.0, 119.0),
   226: (101.0, 118.0), 227: (98.0, 118.0), 228: (96.0, 118.0), 229: (91.0, 116.0), 230: (90.0, 110.0),
   231: (87.0, 110.5), 232: (85.5, 106.0), 233: (82.0, 104.0), 234: (81.0, 101.0), 235: (73.0, 105.0),
   236: (71.0, 101.0), 237: (70.0, 97.0), 238: (70.0, 94.5), 239: (65.0, 95.0), 240: (132.0, 101.0), 241: (69.0, 91.0),
   242: (70.0, 89.0), 243: (138.0, 111.0), 246: (84.0, 100.0), 247: (86.5, 102.0), 248: (89.0, 104.0),
   249: (92.0, 105.0), 250: (94.5, 106.5), 251: (97.5, 108.0), 252: (100.0, 109.5), 253: (103.0, 111.0),
   254: (105.0, 112.0), 255: (108.0, 113.5), 256: (111.0, 115.0), 257: (113.0, 116.0), 258: (116.0, 117.5),
   259: (119.0, 118.0), 260: (122.0, 119.0), 261: (124.5, 121.0), 262: (127.0, 121.5), 263: (129.0, 122.0),
   264: (131.0, 122.5), 265: (133.5, 123.0), 266: (136.0, 119.0), 267: (136.0, 116.0), 268: (135.0, 114.0),
   269: (133.0, 111.0), 270: (131.0, 109.5), 271: (130.0, 107.0), 272: (127.5, 105.5), 273: (127.0, 103.0),
   274: (124.5, 101.0), 275: (119.0, 103.0), 276: (121.0, 96.0), 277: (119.0, 95.0), 278: (117.0, 93.0),
   279: (114.0, 90.0), 280: (108.0, 88.0), 281: (109.0, 85.0), 282: (107.0, 83.0), 283: (103.0, 81.0),
   284: (101.0, 79.0), 285: (96.5, 78.0), 286: (92.5, 76.0), 287: (90.0, 75.0), 288: (90.5, 70.0), 289: (89.0, 67.0),
   290: (86.0, 66.0), 291: (84.0, 64.0), 292: (82.0, 61.0), 293: (80.0, 59.0), 294: (77.0, 58.0), 295: (76.0, 55.0),
   296: (74.0, 54.0), 297: (69.0, 54.0), 298: (67.5, 50.5), 299: (67.0, 48.0)}
oben = {0: (68.0, 232.0), 1: (72.0, 230.0), 2: (74.0, 227.0), 3: (78.0, 227.0), 4: (81.0, 226.0), 5: (85.0, 225.0),
   6: (89.0, 223.0), 7: (91.5, 221.5), 16: (139.5, 200.0), 17: (121.0, 201.5), 18: (123.5, 200.5), 19: (126.0, 199.5),
   20: (129.0, 197.0), 21: (131.0, 195.0), 22: (133.5, 197.0), 23: (136.0, 196.0), 24: (138.0, 195.0),
   25: (141.0, 194.0), 26: (143.0, 195.0), 27: (144.0, 194.0), 28: (146.0, 193.0), 30: (173.0, 195.0),
   31: (161.0, 195.0), 32: (152.5, 195.0), 33: (150.0, 201.0), 34: (146.0, 202.0), 35: (142.0, 203.0),
   36: (138.0, 206.0), 37: (134.0, 205.0), 38: (131.0, 208.0), 39: (126.5, 210.0), 40: (123.0, 210.0),
   41: (118.0, 212.0), 42: (115.0, 214.0), 43: (111.0, 214.0), 44: (106.5, 211.5), 45: (103.0, 212.0),
   46: (99.0, 215.0), 47: (95.0, 212.0), 48: (93.0, 212.0), 49: (89.5, 213.5), 50: (85.0, 218.0), 51: (83.5, 214.5),
   52: (78.5, 212.0), 53: (84.0, 210.0), 54: (82.0, 207.0), 55: (89.0, 206.0), 56: (91.0, 202.5), 57: (94.0, 201.0),
   58: (97.0, 198.0), 59: (99.5, 196.0), 60: (102.0, 194.0), 61: (104.5, 191.5), 62: (108.0, 188.0),
   63: (111.0, 186.0), 64: (114.0, 184.0), 65: (115.0, 181.0), 66: (118.0, 179.0), 67: (121.0, 177.0),
   68: (123.0, 174.0), 69: (126.0, 172.0), 70: (129.0, 169.5), 71: (128.0, 165.5), 72: (133.0, 164.0),
   73: (135.0, 162.0), 75: (139.5, 156.5), 77: (143.0, 151.0), 78: (144.5, 148.0), 79: (146.5, 146.5),
   82: (151.0, 136.5), 83: (153.5, 134.5), 84: (153.0, 132.0), 93: (162.0, 110.0), 94: (163.0, 115.0),
   98: (162.0, 122.5), 100: (155.0, 127.0), 103: (162.0, 137.0), 104: (161.0, 140.0), 105: (161.0, 143.0),
   106: (161.5, 146.5), 107: (162.0, 149.0), 108: (161.5, 153.0), 109: (160.0, 157.0), 110: (162.0, 160.0),
   111: (163.0, 164.0), 112: (165.5, 167.0), 113: (168.0, 170.0), 114: (171.0, 173.0), 115: (173.0, 176.0),
   116: (175.0, 180.0), 117: (178.0, 182.5), 118: (182.0, 185.0), 119: (184.0, 188.0), 120: (188.0, 189.0),
   121: (191.0, 192.0), 122: (195.0, 194.0), 123: (199.0, 195.0), 124: (203.0, 194.5), 125: (206.0, 196.0),
   126: (210.0, 196.5), 127: (214.0, 196.0), 128: (218.0, 196.0), 129: (221.0, 197.0), 130: (224.0, 198.0),
   131: (227.0, 200.0), 132: (231.0, 212.0), 133: (234.0, 200.0), 134: (238.5, 199.5), 135: (243.0, 198.5),
   136: (246.0, 198.0), 137: (250.0, 198.0), 138: (254.0, 195.0), 139: (258.0, 194.0), 140: (261.0, 192.0),
   141: (265.0, 190.0), 142: (268.0, 187.0), 143: (269.5, 183.5), 144: (271.0, 180.0), 145: (273.0, 177.0),
   146: (273.0, 174.0), 147: (273.0, 171.0), 148: (272.5, 167.0), 149: (272.0, 164.0), 150: (271.0, 160.0),
   151: (269.0, 157.0), 152: (268.0, 154.0), 153: (266.0, 151.0), 154: (264.0, 147.5), 155: (262.0, 144.5),
   156: (260.0, 141.0), 157: (258.0, 138.0), 158: (256.0, 136.0), 159: (254.0, 133.0), 160: (252.0, 130.0),
   161: (250.0, 127.0), 162: (248.0, 124.0), 163: (246.0, 121.0), 164: (244.0, 118.0), 165: (242.5, 116.0),
   166: (240.5, 113.0), 167: (238.0, 110.0), 168: (237.0, 107.5), 169: (235.0, 104.0), 170: (233.0, 102.0),
   171: (231.0, 99.0), 172: (229.0, 97.0), 173: (227.5, 94.0), 174: (225.0, 91.0), 175: (224.0, 88.5),
   176: (222.0, 86.0), 177: (220.0, 83.0), 178: (218.0, 80.5), 179: (216.0, 78.0), 180: (214.0, 75.0),
   181: (212.0, 73.0), 182: (209.0, 71.0), 183: (207.0, 70.0), 184: (204.0, 70.0), 185: (202.0, 71.5),
   186: (200.0, 74.0), 187: (197.5, 76.5), 188: (196.5, 79.5), 189: (192.0, 81.0), 190: (190.0, 84.0),
   191: (188.0, 86.0), 192: (188.5, 89.5), 193: (185.0, 92.0), 194: (184.0, 95.0), 195: (186.0, 100.0),
   196: (179.5, 100.5), 197: (177.0, 104.0), 198: (180.5, 108.5), 199: (175.0, 109.0), 200: (174.5, 113.0),
   201: (173.0, 115.5), 202: (173.0, 118.0), 203: (171.5, 122.5), 204: (167.0, 123.0), 205: (165.0, 126.0),
   206: (163.5, 129.5), 210: (154.0, 138.5), 211: (151.0, 140.0), 212: (148.0, 142.0), 213: (145.0, 143.0),
   214: (142.0, 144.0), 215: (139.0, 146.0), 216: (135.0, 147.0), 217: (132.0, 147.0), 218: (129.0, 147.5),
   219: (126.0, 148.0), 220: (123.0, 148.0), 221: (119.0, 147.0), 222: (116.5, 147.0), 223: (113.0, 146.5),
   224: (110.0, 146.0), 225: (107.0, 146.0), 226: (104.0, 143.0), 227: (101.0, 141.0), 228: (99.0, 140.0),
   229: (96.0, 138.0), 230: (94.0, 135.0), 231: (91.0, 133.0), 232: (89.0, 130.0), 233: (87.0, 128.0),
   234: (85.0, 125.0), 235: (83.0, 122.5), 236: (81.0, 120.0), 237: (79.0, 117.0), 238: (77.5, 114.0),
   239: (76.0, 111.0), 240: (74.0, 108.0), 241: (73.0, 105.0), 242: (70.0, 102.0), 243: (69.5, 99.5),
   244: (70.0, 97.0), 245: (73.0, 96.0), 246: (77.0, 94.0), 247: (80.0, 94.0), 248: (83.0, 100.0), 249: (86.0, 101.0),
   250: (89.0, 96.0), 251: (92.0, 98.0), 252: (95.5, 100.5), 253: (99.0, 103.0), 254: (101.0, 102.0),
   255: (104.0, 104.0), 256: (108.0, 105.5), 257: (111.0, 104.5), 258: (114.0, 105.0), 259: (117.5, 104.0),
   260: (121.0, 103.5), 261: (124.5, 101.0), 262: (126.0, 97.0), 263: (129.0, 95.0), 264: (130.5, 92.0),
   265: (132.0, 89.0), 266: (136.5, 87.5), 267: (141.0, 86.0), 268: (138.0, 80.0), 269: (140.5, 77.5),
   270: (142.0, 75.0), 271: (149.0, 74.0), 272: (151.0, 71.0), 273: (152.0, 67.0), 274: (153.0, 64.0),
   275: (155.0, 60.5), 276: (157.0, 57.0), 277: (158.0, 53.5), 278: (160.0, 51.0), 279: (163.0, 48.0),
   280: (166.0, 47.0), 281: (170.0, 46.0), 282: (174.0, 44.5), 283: (177.0, 44.0), 284: (180.5, 43.5),
   285: (184.0, 42.5), 286: (187.0, 40.0), 287: (190.0, 38.0), 288: (193.0, 36.0), 289: (195.0, 33.0),
   290: (197.0, 30.0), 291: (200.0, 27.0), 292: (202.5, 24.0), 293: (205.0, 21.0), 294: (207.0, 18.0),
   295: (210.0, 15.0), 296: (213.0, 13.0), 297: (216.5, 12.0), 298: (219.5, 10.5), 299: (223.0, 11.0)}
oben2 = {1: (252.0, 210.5), 2: (250.5, 214.5), 3: (247.0, 206.0), 4: (245.0, 206.0), 5: (243.0, 203.0),
   6: (240.0, 204.0), 7: (238.0, 201.0), 8: (233.0, 204.5), 9: (232.0, 200.0), 10: (229.0, 199.0), 11: (226.0, 197.0),
   12: (223.0, 196.0), 13: (220.0, 194.5), 14: (216.0, 194.0), 15: (213.0, 192.0), 16: (210.0, 190.0),
   17: (205.0, 192.0), 18: (202.0, 190.0), 19: (201.0, 184.5), 20: (196.0, 187.5), 21: (196.0, 181.0),
   22: (190.5, 185.5), 23: (190.5, 177.0), 24: (189.0, 175.5), 25: (186.0, 176.0), 26: (183.0, 174.0),
   27: (181.0, 178.0), 28: (179.0, 171.5), 29: (176.5, 170.5), 30: (173.0, 171.0), 31: (165.0, 171.5),
   44: (204.0, 181.0), 45: (208.5, 182.0), 46: (211.0, 183.0), 47: (214.0, 185.0), 48: (217.0, 185.0),
   49: (220.5, 187.5), 50: (223.0, 188.5), 52: (227.0, 189.5), 53: (237.0, 185.5), 54: (243.5, 185.5),
   55: (229.0, 186.0), 56: (230.5, 181.5), 57: (227.5, 182.5), 58: (225.0, 178.0), 59: (220.0, 180.0),
   60: (218.0, 178.0), 61: (219.0, 174.0), 62: (217.0, 170.0), 63: (214.0, 169.5), 64: (210.5, 169.5),
   65: (209.5, 166.5), 66: (210.0, 161.0), 67: (204.0, 162.0), 68: (201.5, 160.0), 69: (200.0, 157.0),
   70: (200.0, 154.0), 71: (197.0, 152.0), 72: (194.0, 151.0), 73: (190.5, 148.0), 74: (189.0, 146.0),
   75: (186.5, 143.5), 76: (185.0, 141.0), 77: (183.0, 138.0), 78: (181.5, 135.5), 79: (178.5, 133.5),
   80: (182.0, 128.0), 81: (180.0, 125.0), 82: (178.5, 122.0), 85: (174.5, 113.0), 86: (167.0, 112.0),
   88: (164.0, 106.0), 89: (164.0, 104.0), 90: (165.0, 99.0), 98: (164.0, 114.0), 101: (168.0, 119.0),
   104: (167.0, 127.5), 105: (167.0, 131.0), 106: (165.0, 133.0), 107: (166.0, 136.0), 108: (166.0, 139.0),
   109: (165.0, 142.0), 110: (164.0, 144.5), 111: (163.0, 147.0), 112: (161.0, 150.0), 113: (159.0, 152.5),
   114: (157.0, 155.0), 115: (155.0, 157.0), 116: (153.0, 159.0), 117: (151.0, 161.0), 118: (149.0, 163.0),
   119: (146.0, 165.0), 120: (144.0, 166.0), 121: (141.0, 168.0), 122: (138.0, 169.0), 123: (135.0, 169.0),
   124: (132.0, 171.0), 125: (129.0, 172.0), 126: (126.5, 172.5), 127: (123.5, 172.0), 128: (121.0, 173.0),
   129: (118.0, 175.0), 130: (114.5, 175.0), 131: (112.0, 176.0), 132: (109.0, 177.0), 133: (105.0, 176.0),
   134: (102.0, 177.0), 135: (99.0, 176.0), 136: (96.0, 175.0), 137: (93.0, 173.5), 138: (90.0, 173.0),
   139: (87.0, 172.0), 140: (84.0, 170.0), 141: (82.0, 167.0), 142: (80.0, 165.0), 143: (77.0, 163.0),
   144: (75.0, 161.0), 145: (73.5, 158.5), 146: (71.0, 156.0), 147: (70.5, 153.0), 148: (70.0, 151.0),
   149: (70.0, 148.0), 150: (69.0, 145.0), 151: (70.0, 143.0), 152: (70.5, 140.0), 153: (71.0, 137.0),
   154: (72.5, 134.0), 155: (75.0, 132.0), 156: (76.0, 129.0), 157: (78.0, 126.5), 158: (76.0, 123.0),
   159: (78.0, 120.0), 160: (79.0, 117.0), 161: (79.0, 114.0), 162: (82.0, 112.0), 163: (85.0, 109.0),
   164: (85.0, 105.0), 165: (87.0, 103.0), 166: (88.0, 100.0), 167: (89.0, 97.0), 168: (90.5, 94.0), 169: (93.0, 91.0),
   170: (94.0, 88.0), 171: (95.0, 85.0), 172: (97.0, 83.0), 173: (100.0, 80.5), 174: (100.0, 77.0), 175: (103.0, 74.5),
   176: (103.0, 71.0), 177: (108.0, 69.0), 178: (109.0, 66.5), 179: (110.5, 63.5), 180: (114.0, 61.0),
   181: (115.0, 58.0), 182: (117.5, 56.0), 183: (121.0, 56.0), 184: (124.0, 58.0), 185: (126.5, 59.5),
   186: (128.0, 62.0), 187: (131.0, 65.0), 188: (132.5, 67.5), 189: (134.0, 70.5), 190: (135.0, 73.0),
   191: (137.0, 76.5), 192: (139.0, 79.0), 193: (140.0, 82.0), 194: (142.0, 84.5), 195: (143.5, 87.0),
   196: (145.0, 91.0), 197: (146.0, 93.5), 198: (148.0, 96.0), 199: (150.0, 99.0), 200: (151.5, 101.5),
   201: (153.0, 104.0), 202: (155.0, 107.0), 203: (157.0, 109.0), 204: (159.0, 111.5), 205: (161.0, 114.0),
   206: (163.0, 117.0), 207: (165.0, 119.0), 208: (166.5, 121.5), 209: (170.0, 123.0), 210: (172.0, 125.5),
   214: (185.0, 130.0), 215: (187.0, 131.0), 216: (190.0, 133.0), 217: (193.0, 133.0), 218: (196.0, 134.0),
   219: (199.5, 133.5), 220: (203.0, 133.0), 221: (206.0, 133.0), 222: (209.5, 132.5), 223: (213.0, 132.5),
   224: (216.0, 131.5), 225: (219.0, 131.0), 226: (222.0, 128.0), 227: (225.0, 127.0), 228: (228.0, 125.5),
   229: (231.0, 123.0), 230: (234.0, 122.0), 231: (235.5, 118.5), 232: (237.5, 116.0), 233: (240.0, 113.0),
   234: (242.0, 111.0), 235: (243.0, 107.0), 236: (245.5, 106.0), 237: (246.0, 102.5), 238: (246.5, 100.0),
   239: (250.0, 97.5), 240: (250.0, 95.0), 241: (249.5, 92.0), 242: (251.5, 90.0), 243: (249.5, 87.5),
   244: (247.0, 87.0), 245: (244.0, 88.0), 246: (241.0, 89.0), 247: (238.0, 89.0), 248: (235.0, 91.0),
   249: (232.0, 92.0), 250: (229.0, 92.0), 251: (225.5, 92.5), 252: (222.0, 94.0), 253: (219.0, 95.0),
   254: (216.0, 95.5), 255: (213.0, 97.0), 256: (210.0, 97.0), 257: (207.0, 97.0), 258: (204.0, 98.0),
   259: (201.0, 97.0), 260: (198.0, 97.0), 261: (195.0, 96.0), 262: (193.0, 94.0), 263: (190.0, 92.0),
   264: (188.0, 90.0), 265: (187.0, 87.0), 266: (185.0, 85.0), 267: (183.0, 82.0), 268: (182.0, 80.0),
   269: (180.5, 77.5), 270: (179.0, 74.0), 272: (176.0, 70.0), 273: (174.0, 67.0), 274: (172.5, 64.5),
   275: (170.0, 62.0), 276: (169.0, 59.5), 277: (167.0, 57.5), 278: (165.0, 55.0), 279: (163.0, 53.0),
   280: (160.0, 52.0), 281: (157.0, 51.0), 282: (154.0, 51.0), 283: (151.5, 50.5), 284: (148.0, 50.0),
   285: (145.0, 49.0), 286: (143.0, 47.0), 287: (141.0, 46.0), 288: (139.0, 44.0), 289: (137.0, 42.0),
   290: (135.0, 40.0), 291: (133.0, 38.0), 292: (132.0, 36.0), 293: (130.0, 34.0), 294: (128.0, 32.0),
   295: (126.0, 30.0), 296: (123.0, 28.0), 297: (121.0, 26.0), 298: (118.0, 26.0), 299: (114.5, 25.0)}


def main(args):
	strip = LedStrip(args=args)

	node_dict = oben2

	nodes = collections.OrderedDict(sorted(node_dict.items()))
	nodes = get_metric_nodes(nodes)

	# initialize particles with one particle
	particles = [Particle(300, 1, 60, __DEFAULT_TTL, 1)]

	last_time = time.perf_counter()

	while True:
		strip.clear()
		if len(sys.argv) > 1 and sys.argv[1] == 'm':
			min_val = 5000
			max_val = 0
			for value in nodes.values():
				min_val = min(value[1], min_val)
				max_val = max(value[1], max_val)
			for key, value in nodes.items():
				strip.add_hsv(key, 3 * value[1] / (max_val - min_val), 1, 0.2)

		# create particle
		spawn = random.randrange(0, 50)
		if spawn == 0:
			particles.append(Particle(150, random.randrange(-150, -5) / 100, random.random(), __DEFAULT_TTL, random.randrange(1, 4)))
		web_particles = []  # webserver.step()
		for web_particle in web_particles:
			if web_particle[0] is not None and web_particle[1] is not None:
				if web_particle[2]:
					particles.append(Particle(300, web_particle[1] * 2, web_particle[0], __DEFAULT_TTL, 1))
				else:
					particles.append(Particle(1, -web_particle[1] * 2, web_particle[0], __DEFAULT_TTL, 1))

		now = time.perf_counter()
		particles = sorted(particles, key=lambda p: p.pos)
		for i, particle in enumerate(particles):
			radius = 0
			height = 0

			# Collision detection
			if i > 0 and i < (len(particles) - 1):
				left = particles[i-1]
				right = particles[i+1]
				if within(left, particle):
					collide(left, particle)
				if within(right, particle):
					collide(particle, right)

			next_key = next(iter(nodes.keys()))
			for key in nodes.keys():
				prev_key = next_key
				next_key = key
				if next_key >= particle.pos > prev_key:
					height = (nodes[next_key][1] - nodes[prev_key][1])
					radius = abs(prev_key - next_key) * __LED_DIST
					break

			if radius == 0:
				radius = 0.00001

			a_slope = (9.81 * max(min(height / radius, 1), -1)) if radius is not 0 else 0
			a_friction = math.copysign(0.01 * 9.81 * math.cos(math.asin(max(min(height / radius, 1), -1))), particle.v)

			a = a_slope - a_friction
			t = now - last_time
			v = particle.v + a * t

			new_pos = particle.pos - (v * t) * __LED_PER_METER

			if not 300 >= new_pos >= 0 or particle.hue <= 0:
				del particles[i]
			else:
				strip.add_hsv(new_pos, #min(math.pow(abs(v) / 2, 2), 0.9), 1,
						particle.hue, 1,
							  max(math.pow(abs(v) / 2, 2), 0.1) * min(particle.ttl / 3, 1))
				if abs(v) < 0.1:
					particles[i] = Particle(new_pos, v, particle.hue, particle.ttl - t, particle.mass)
				else:
					particles[i] = Particle(new_pos, v, particle.hue, __DEFAULT_TTL, particle.mass)

		last_time = now
		strip.transmit()
		time.sleep(0.01)


if __name__ == '__main__':
	parser = argparse.ArgumentParser(description='Gravity-based LED particle simulation')
	LedStrip.add_arguments(parser)
	main(parser.parse_args())
