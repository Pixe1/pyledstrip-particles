import time
import collections
import math
import random
import sys
# import webserver
from pyledstrip import LedStrip

strip = LedStrip(power_limit=0.2)

__LED_PER_METER = 60
__LED_DIST = 1 / __LED_PER_METER
__DEFAULT_TTL = 2


def get_metric_nodes(nodes):
	y_values = [value[1] for value in nodes.values()]
	k = [key for key in nodes.keys()]
	y_max = max(y_values)

	max_dist_per_led = 0
	for i in range(1, len(nodes)):
		key_dist = k[i] - k[i - 1]
		x_diff = nodes[k[i]][0] - nodes[k[i - 1]][0]
		y_diff = nodes[k[i]][1] - nodes[k[i - 1]][1]
		dist = math.sqrt(pow(x_diff, 2) + pow(y_diff, 2))
		dist_per_led = dist / key_dist
		max_dist_per_led = max(dist_per_led, max_dist_per_led)
	f = __LED_DIST / max_dist_per_led / 1.5

	i = 0
	for key, value in nodes.items():
		nodes[key] = (nodes[key][0] * f, (y_max - y_values[i]) * f)
		i = i + 1
	return nodes


def main():
	node_dict = {
		0: (200.0, 33.25), 1: (199.75, 31.25), 2: (198.875, 29.5), 3: (197.5, 29.0), 4: (195.375, 29.0),
		5: (192.375, 29.75), 6: (189.5, 32.0), 7: (187.625, 35.0), 8: (188.5, 38.75), 9: (191.5, 43.25),
		10: (191.875, 47.0), 11: (189.0, 50.25), 12: (186.5, 53.75), 13: (185.25, 57.5), 14: (184.375, 61.75),
		15: (183.25, 65.75), 16: (181.75, 69.5), 17: (181.0, 73.75), 18: (181.25, 78.0), 19: (181.5, 82.25),
		20: (179.75, 85.75), 21: (176.375, 86.125), 22: (174.5, 84.375), 23: (173.75, 84.25), 24: (172.5, 87.875),
		25: (171.375, 92.166666666666671), 26: (171.0, 92.166666666666671), 27: (171.0, 89.333333333333329),
		28: (170.125, 90.208333333333329), 29: (167.75, 95.5), 30: (164.875, 98.5), 31: (162.5, 97.375),
		32: (161.0, 94.625), 33: (160.25, 92.0), 34: (158.25, 90.0), 35: (154.75, 88.25), 36: (153.5, 84.875),
		37: (154.5, 79.25), 38: (155.0, 74.625), 39: (155.0, 71.5), 40: (154.5, 68.5), 41: (153.5, 65.0),
		42: (152.75, 61.25), 43: (151.75, 57.875), 44: (150.0, 54.75), 45: (147.75, 51.625), 46: (145.25, 48.25),
		47: (142.75, 45.0), 48: (140.0, 42.25), 49: (137.0, 40.5), 50: (134.0, 40.25), 51: (131.0, 41.375),
		52: (128.5, 43.5), 53: (127.0, 46.125), 54: (125.875, 49.25), 55: (124.5, 53.0), 56: (123.0, 56.75),
		57: (121.875, 60.25), 58: (121.375, 63.75), 59: (120.75, 67.25), 60: (119.5, 70.75), 61: (118.375, 74.375),
		62: (118.0, 78.25), 63: (117.875, 82.125), 64: (117.25, 86.0), 65: (116.375, 89.75), 66: (116.0, 93.5),
		67: (116.0, 97.5), 68: (116.0, 101.25), 69: (116.0, 105.0), 70: (116.0, 108.75), 71: (116.5, 112.25),
		72: (117.875, 115.75), 73: (119.5, 119.25), 74: (120.875, 122.75), 75: (122.5, 125.75), 76: (124.75, 128.1875),
		77: (127.0, 130.75), 78: (129.5, 133.4375), 79: (132.5, 135.625), 80: (135.30000000000001, 137.17500000000001),
		81: (138.19999999999999, 138.69999999999999), 82: (141.40000000000001, 140.40000000000001),
		83: (144.60000000000002, 142.10000000000002), 84: (147.80000000000001, 143.80000000000001),
		85: (151.19999999999999, 145.07499999999999), 86: (155.0, 145.625), 87: (158.75, 145.625), 88: (162.0, 144.75),
		89: (165.25, 143.25), 90: (168.625, 141.5), 91: (173.75, 139.5), 92: (180.375, 137.25), 93: (183.75, 134.25),
		94: (184.0, 131.25), 95: (184.0, 128.25), 96: (184.5, 124.5), 97: (185.75, 120.75), 98: (186.75, 117.375),
		99: (187.0, 114.5), 100: (187.40000000000001, 111.72499999999999),
		101: (188.60000000000002, 108.40000000000001), 102: (190.19999999999999, 104.8),
		103: (191.79999999999998, 101.19999999999999), 104: (193.40000000000001, 97.599999999999994),
		105: (194.56428571428572, 94.150000000000006), 106: (194.85714285714289, 91.0),
		107: (194.71428571428572, 88.0), 108: (194.57142857142858, 85.0), 109: (194.42857142857144, 82.0),
		110: (194.28571428571428, 79.0), 111: (194.14285714285714, 76.0), 112: (194.53571428571428, 72.25),
		113: (195.75, 68.0), 114: (197.375, 65.5), 115: (199.5, 65.0), 116: (201.875, 65.75), 117: (203.75, 67.75),
		118: (204.75, 70.25), 119: (204.125, 72.75), 120: (202.375, 75.25), 121: (201.125, 78.25),
		122: (200.625, 81.25), 123: (200.25, 84.0), 124: (199.5, 86.75), 125: (198.625, 89.5), 126: (197.75, 93.75),
		127: (196.25, 97.875), 128: (193.875, 100.125), 129: (191.625, 102.375), 130: (190.375, 105.375),
		131: (189.625, 109.0), 132: (187.25, 112.125), 133: (182.375, 114.1875), 134: (177.0, 116.75),
		135: (173.25, 119.6875), 136: (171.5, 121.5), 137: (169.125, 122.875), 138: (165.0, 125.625),
		139: (161.875, 129.125), 140: (160.5, 132.875), 141: (158.5, 136.5), 142: (154.375, 138.0),
		143: (150.0, 138.25), 144: (148.25, 138.75), 145: (146.75, 139.0), 146: (145.125, 140.0),
		147: (146.5, 142.23529411764707), 148: (148.0, 143.94117647058823), 149: (148.0, 144.88235294117646),
		150: (148.0, 145.8235294117647), 151: (148.0, 146.76470588235293), 152: (148.0, 147.70588235294119),
		153: (148.0, 148.64705882352942), 154: (148.0, 149.58823529411765), 155: (148.0, 150.52941176470588),
		156: (148.0, 151.47058823529412), 157: (148.0, 152.41176470588235), 158: (148.0, 153.35294117647058),
		159: (148.0, 154.29411764705881), 160: (148.0, 155.23529411764707), 161: (148.0, 156.1764705882353),
		162: (148.0, 157.11764705882354), 163: (148.0, 158.05882352941177), 164: (148.5, 158.88970588235293),
		165: (150.1875, 159.5625), 166: (152.75, 160.25), 167: (155.4375, 160.8125), 168: (158.625, 161.25),
		169: (162.375, 162.5), 170: (165.375, 164.75), 171: (167.72916666666666, 167.04166666666666),
		172: (170.41666666666666, 169.16666666666666), 173: (173.33333333333334, 171.33333333333334),
		174: (176.25, 173.5), 175: (179.16666666666666, 175.66666666666666),
		176: (182.08333333333334, 177.83333333333334), 177: (184.77083333333334, 180.20833333333334),
		178: (187.0, 182.75), 179: (189.25, 185.0), 180: (191.75, 187.0), 181: (194.0, 189.25), 182: (196.0, 191.75),
		183: (198.0, 194.25), 184: (199.75, 197.0), 185: (201.375, 199.75), 186: (203.0, 202.25),
		187: (204.125, 204.75), 188: (204.75, 207.125), 189: (205.0, 209.5), 190: (204.9375, 212.0),
		191: (204.75, 214.5), 192: (203.9375, 217.375), 193: (201.375, 220.0), 194: (197.25, 220.75),
		195: (192.5, 220.0), 196: (188.5, 217.5), 197: (186.25, 213.25), 198: (183.75, 210.0), 199: (181.0, 207.375),
		200: (179.25, 204.125), 201: (176.625, 201.875), 202: (173.625, 200.375), 203: (172.5, 197.75),
		204: (171.375, 194.125), 205: (168.625, 191.25), 206: (165.625, 189.875), 207: (163.375, 189.0),
		208: (163.75, 188.0), 209: (166.25, 187.25), 210: (167.0625, 185.4375), 211: (165.75, 180.75),
		212: (161.1875, 176.0625), 213: (153.0, 174.375), 214: (145.75, 173.875), 215: (140.75, 173.5),
		216: (136.75, 173.75), 217: (133.25, 174.25), 218: (130.0, 175.0), 219: (127.5, 176.25), 220: (126.0, 177.75),
		221: (125.25, 179.125), 222: (125.0, 180.5), 223: (125.0, 182.0), 224: (125.0, 183.75), 225: (125.75, 185.625),
		226: (127.625, 187.5), 227: (130.0, 189.25), 228: (132.875, 189.75), 229: (136.0, 189.0), 230: (139.0, 188.0),
		231: (141.75, 186.25), 232: (144.0, 183.875), 233: (146.5, 181.25), 234: (149.625, 178.375),
		235: (153.25, 177.25), 236: (157.5, 178.125), 237: (161.75, 179.0), 238: (166.125, 179.125),
		239: (171.0, 179.0), 240: (175.375, 179.0), 241: (178.25, 177.75), 242: (181.125, 174.75),
		243: (185.375, 172.5), 244: (189.0, 171.25), 245: (191.375, 169.25), 246: (193.875, 167.0),
		247: (196.5, 165.0), 248: (198.375, 163.0), 249: (199.25, 160.25), 250: (200.25, 157.25), 251: (202.0, 155.5),
		252: (203.5, 154.0), 253: (203.875, 152.0), 254: (203.625, 150.0), 255: (203.375, 147.875),
		256: (203.125, 145.5), 257: (202.5, 143.125), 258: (201.5, 140.75), 259: (200.75, 138.125),
		260: (200.0, 135.5), 261: (198.92105263157896, 132.91447368421052),
		262: (197.68421052631578, 130.15789473684211), 263: (196.36842105263159, 127.31578947368421),
		264: (195.05263157894737, 124.47368421052633), 265: (193.73684210526315, 121.63157894736841),
		266: (192.42105263157896, 118.78947368421052), 267: (191.10526315789474, 115.94736842105263),
		268: (189.78947368421052, 113.10526315789474), 269: (188.4736842105263, 110.26315789473685),
		270: (187.15789473684211, 107.42105263157895), 271: (185.84210526315792, 104.57894736842104),
		272: (184.5263157894737, 101.73684210526315), 273: (183.21052631578948, 98.89473684210526),
		274: (181.89473684210526, 96.05263157894737), 275: (180.57894736842104, 93.21052631578948),
		276: (179.26315789473685, 90.368421052631575), 277: (177.94736842105263, 87.526315789473685),
		278: (176.63157894736844, 84.68421052631578), 279: (175.31578947368422, 81.84210526315789),
		280: (174.07894736842104, 78.96052631578948), 281: (173.25, 75.875), 282: (172.625, 72.5),
		283: (171.875, 69.125), 284: (171.375, 66.0), 285: (171.125, 62.75), 286: (171.0, 59.25), 287: (171.25, 56.0),
		288: (172.0, 53.0), 289: (173.0, 50.5625), 290: (174.0, 49.25), 291: (175.25, 48.5625), 292: (177.0, 48.125),
		293: (178.75, 47.75), 294: (180.25, 46.5), 295: (182.0, 44.5), 296: (183.5, 43.25), 297: (184.0, 43.0),
		298: (184.0, 43.0), 299: (184.0, 43.0)
	}

	nodes = collections.OrderedDict(sorted(node_dict.items()))
	nodes = get_metric_nodes(nodes)

	# initialize particles with one particle
	particles = [(300, 1, 60, __DEFAULT_TTL)]

	last_time = time.perf_counter()

	while True:
		strip.clear()
		if len(sys.argv) > 1 and sys.argv[1] == 'm':
			min_val = 5000
			max_val = 0
			for value in nodes.values():
				min_val = min(value[1], min_val)
				max_val = max(value[1], max_val)
			for key, value in nodes.items():
				strip.add_hsv(key, 3 * value[1] / (max_val - min_val), 1, 0.2)

		# create particle
		spawn = random.randrange(0, 300)
		if spawn <= 0:
			particles.append((0, random.randrange(-150, -5) / 100, random.randrange(0, 360), __DEFAULT_TTL))
		elif spawn >= 300:
			particles.append((300, random.randrange(5, 150) / 100, random.randrange(0, 360), __DEFAULT_TTL))
		web_particles = []  # webserver.step()
		for web_particle in web_particles:
			if web_particle[0] is not None and web_particle[1] is not None:
				if web_particle[2]:
					particles.append((300, web_particle[1] * 2, web_particle[0], __DEFAULT_TTL))
				else:
					particles.append((1, -web_particle[1] * 2, web_particle[0], __DEFAULT_TTL))

		now = time.perf_counter()
		for i, particle in enumerate(particles):
			radius = 0
			height = 0

			next_key = next(iter(nodes.keys()))
			for key in nodes.keys():
				prev_key = next_key
				next_key = key
				if next_key >= particle[0] > prev_key:
					height = (nodes[next_key][1] - nodes[prev_key][1])
					radius = abs(prev_key - next_key) * __LED_DIST
					break

			if radius == 0:
				radius = 0.00001

			a_slope = (9.81 * max(min(height / radius, 1), -1)) if radius is not 0 else 0
			a_friction = math.copysign(0.02 * 9.81 * math.cos(math.asin(max(min(height / radius, 1), -1))), particle[1])

			a = a_slope - a_friction
			t = now - last_time
			v = particle[1] + a * t

			new_pos = particle[0] - (v * t) * __LED_PER_METER

			if not 300 >= new_pos >= 0 or particle[3] <= 0:
				del particles[i]
			else:
				# strip.add_hsv(new_pos, particle[2] / 360, 1, particle[3] / 3)
				strip.add_hsv(new_pos, min(math.pow(abs(v) / 2, 2), 0.9), 1,
							  max(math.pow(abs(v) / 2, 2), 0.1) * min(particle[3] / 3, 1))
				if abs(v) < 0.1:
					particles[i] = (new_pos, v, particle[2], particle[3] - t)
				else:
					particles[i] = (new_pos, v, particle[2], __DEFAULT_TTL)

		last_time = now
		strip.transmit()
		time.sleep(0.01)


if __name__ == '__main__':
	main()
